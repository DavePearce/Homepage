<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>whiley on Dave's Homepage</title><link>https://whileydave.com/tags/whiley/</link><description>Recent content in whiley on Dave's Homepage</description><generator>Hugo -- gohugo.io</generator><language>en-nz</language><lastBuildDate>Sat, 15 Jan 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://whileydave.com/tags/whiley/index.xml" rel="self" type="application/rss+xml"/><item><title>Verifying Whiley Programs with Boogie</title><link>https://whileydave.com/publications/pug22_jar/</link><pubDate>Sat, 15 Jan 2022 00:00:00 +0000</pubDate><guid>https://whileydave.com/publications/pug22_jar/</guid><description>Abstract: The quest to develop increasingly sophisticated verification systems continues unabated. Tools such as Dafny, Spec#, ESC/Java, SPARK Ada, and Whiley attempt to seamlessly integrate specification and verification into a programming language, in a similar way to type checking.</description></item><item><title>Compiling Whiley for Embedded Systems</title><link>https://whileydave.com/publications/anker21_comp589/</link><pubDate>Mon, 01 Nov 2021 00:00:00 +0000</pubDate><guid>https://whileydave.com/publications/anker21_comp589/</guid><description>Abstract.
Whiley is a statically typed language that supports both object-oriented as well as functional programming language paradigms. Like many other programming languages, Whiley also supports variables, primitive types (e.g. int, bool), methods, control-flow statements (e.</description></item><item><title>Transpiling Whiley to C++</title><link>https://whileydave.com/publications/mcmurray21_engr489/</link><pubDate>Mon, 01 Nov 2021 00:00:00 +0000</pubDate><guid>https://whileydave.com/publications/mcmurray21_engr489/</guid><description>Abstract. Whiley2Cpp is a plugin for the Whiley programming language that is being developed as part of this project. The plugin translates Whiley code into C++ code. Whiley is a programming language that uses an automated theorem prover to statically check programs for correctness.</description></item><item><title>Whiley to TypeScript Transpiler</title><link>https://whileydave.com/publications/rainford21_engr489/</link><pubDate>Mon, 01 Nov 2021 00:00:00 +0000</pubDate><guid>https://whileydave.com/publications/rainford21_engr489/</guid><description>Abstract. Whiley is an imperative and functional programming language that supports Extended Static Checking through formal verification. TypeScript is a gradually typed programming language that is a superset of JavaScript. The main purpose of TypeScript is to add type safety to the JavaScript language.</description></item><item><title>Finding Bugs with Specification-Based Testing is Easy!</title><link/><pubDate>Thu, 25 Mar 2021 00:00:00 +0000</pubDate><guid/><description/></item><item><title>Finding Bugs with Specification-Based Testing is Easy!</title><link>https://whileydave.com/publications/cp21_programming/</link><pubDate>Fri, 01 Jan 2021 00:00:00 +0000</pubDate><guid>https://whileydave.com/publications/cp21_programming/</guid><description>Abstract: Automated specification-based testing has a long history with several notable tools having emerged. For example, QuickCheck for Haskell focuses on testing against user-provided properties. Others, such as JMLUnit, use specifications in the form of pre- and post-conditions to drive testing.</description></item><item><title>Profiling the Java Compiler for Improved Incremental Compiler Design</title><link>https://whileydave.com/publications/oliver20_engr489/</link><pubDate>Sun, 01 Nov 2020 00:00:00 +0000</pubDate><guid>https://whileydave.com/publications/oliver20_engr489/</guid><description>Abstract. Compiling a program is a process which can take a long time, thereby breaking up a developer&amp;rsquo;s workflow and productivity. Incremental compilation is a method which aims to solve this problem.</description></item><item><title>Functional Reactive Programming in Whiley</title><link/><pubDate>Sat, 26 Sep 2020 00:00:00 +0000</pubDate><guid/><description/></item><item><title>Compiling Whiley for the Ethereum Virtial Machine</title><link>https://whileydave.com/publications/kumar19_engr489/</link><pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate><guid>https://whileydave.com/publications/kumar19_engr489/</guid><description>Abstract. Ethereum is a blockchain based platform that supports a Turing complete contract language. However, methods of writing smart contracts have been error prone. This has resulted in many historically expensive bugs such as the DAO.</description></item><item><title>Compiling Whiley for WebAssembly</title><link>https://whileydave.com/publications/hua19_comp489/</link><pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate><guid>https://whileydave.com/publications/hua19_comp489/</guid><description>Abstract. Whiley is a multi-paradigm programming language which supports Extended Static Checking through formal specification. At compile time, Whiley can identify common errors which are uncaught by a type checker, including division by zero, null reference and array out of bounds errors.</description></item><item><title>Efficient compilation of a verification-friendly programming language</title><link>https://whileydave.com/publications/weng19_phd/</link><pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate><guid>https://whileydave.com/publications/weng19_phd/</guid><description>Abstract. This thesis develops a compiler to convert a program written in the verification friendly programming language Whiley into an efficient implementation in C. Our compiler uses a mixture of static analysis, run-time monitoring and a code generator to and faster integer types, eliminate unnecessary array copies and de-allocate unused memory without garbage collection, so that Whiley programs can be translated into C code to run fast and for long periods on general operating systems as well as limited-resource embedded devices.</description></item><item><title>On the Architecture of a (Verifying) Compiler</title><link/><pubDate>Sun, 16 Dec 2018 00:00:00 +0000</pubDate><guid/><description/></item><item><title>An Introduction to Software Verification with Whiley</title><link>https://whileydave.com/publications/pug18_etss/</link><pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate><guid>https://whileydave.com/publications/pug18_etss/</guid><description>Abstract: This tutorial introduces the basic ideas of software specification and verification, which are important techniques for assuring the quality of software and eliminating common kinds of errors such as buffer overflow.</description></item><item><title>Inferring invariants from postconditions in Whiley</title><link>https://whileydave.com/publications/pope18_engr489/</link><pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate><guid>https://whileydave.com/publications/pope18_engr489/</guid><description>Abstract. For the formal verification of programs, loop invariants must be used to ensure the verifier understands the properties of a loop. These invariants are often trivial, and many are common between loops.</description></item><item><title>On Declarative Rewriting for Sound and Complete Union, Intersection and Negation Types</title><link>https://whileydave.com/publications/pea18_jvlc/</link><pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate><guid>https://whileydave.com/publications/pea18_jvlc/</guid><description>Abstract. Implementing the type system of a programming language is a critical task that is oftendone in an ad-hoc fashion. Whilst this makes it hard to ensure the system is sound, italso makes it difficult to extend as the language evolves.</description></item><item><title>QuickCheck for Whiley</title><link>https://whileydave.com/publications/chin18_engr489/</link><pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate><guid>https://whileydave.com/publications/chin18_engr489/</guid><description>Abstract. Whiley is a programming language that verifies code using formal specifications to improve software quality. Whiley contains a verifying compiler which can identify common bugs. However, the compiler is limited in its ability to discover bugs and may take a long time to verify large programs.</description></item><item><title>Rewriting for Sound and Complete Union, Intersection and Negation Types</title><link>https://whileydave.com/publications/pea18_gpce/</link><pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate><guid>https://whileydave.com/publications/pea18_gpce/</guid><description>Abstract: Implementing the type system of a programming language is a critical task that is often done in an ad-hoc fashion. Whilst this makes it hard to ensure the system is sound, it also makes it difficult to extend as the language evolves.</description></item><item><title>Towards Compilation of an Imperative Language for FPGAs</title><link>https://whileydave.com/publications/ppp18_vmil/</link><pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate><guid>https://whileydave.com/publications/ppp18_vmil/</guid><description>Abstract: Field-Programmable Gate Arrays (FPGAâ€™s) have been around since the early 1980s and have now achieved relatively widespread use. For example, FPGAs are routinely used for high-performance computing, financial applications, seismic modelling, DNA sequence alignment, software defined networking and, occasionally, are even found in smartphones.</description></item><item><title>What does the Future of Programming Look Like?</title><link/><pubDate>Mon, 24 Jul 2017 00:00:00 +0000</pubDate><guid/><description/></item><item><title>Array Programming in Whiley</title><link>https://whileydave.com/publications/pea17_array/</link><pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate><guid>https://whileydave.com/publications/pea17_array/</guid><description>Abstract: Arrays are a fundamental mechanism for developing and reasoning about programs. Using them, one can easily encode a range of important algorithms from various domains, such as for sorting, graph traversal, heap manipulation and more.</description></item><item><title>Compiling Whiley to FPGAs</title><link>https://whileydave.com/publications/pauget17_project/</link><pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate><guid>https://whileydave.com/publications/pauget17_project/</guid><description>Abstract. Improving code performances lies more and more in the relevant use of computational helpers. Computing platforms like OpenCL or CUDA that enable to relocate resource consuming calculations to graphics processing unit (GPU) are now ordinary.</description></item><item><title>Making Whiley Boogie!</title><link>https://whileydave.com/publications/upg17_ifm/</link><pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate><guid>https://whileydave.com/publications/upg17_ifm/</guid><description>Abstract: The quest to develop increasingly sophisticated verification systems continues unabated. Tools such as Dafny, Spec#, ESC/Java, SPARK Ada, and Whiley attempt to seamlessly integrate specification and verification into a programming language, in a similar way to type checking.</description></item><item><title>Lifetime Analysis for Whiley</title><link>https://whileydave.com/publications/schweizer16_msc/</link><pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate><guid>https://whileydave.com/publications/schweizer16_msc/</guid><description>Abstract. Safety critical environments require high programming standards. Verification is a way to prove absence of certain faults and to make sure that a program meets a given specification. Unfortunately, most modern programming languages do not actively support verification.</description></item><item><title>The Whiley Programming Language</title><link/><pubDate>Wed, 26 Aug 2015 00:00:00 +0000</pubDate><guid/><description/></item><item><title>Whiley as a Research Project</title><link/><pubDate>Mon, 23 Mar 2015 00:00:00 +0000</pubDate><guid/><description/></item><item><title>Designing a Verifying Compiler: Lessons Learned from Developing Whiley</title><link>https://whileydave.com/publications/pg15_scp/</link><pubDate>Thu, 01 Jan 2015 00:00:00 +0000</pubDate><guid>https://whileydave.com/publications/pg15_scp/</guid><description>Abstract. An ongoing challenge for computer science is the development of a tool which automati- cally verifies programs meet their specifications, and are free from runtime errors such as divide-by-zero, array out-of-bounds and null dereferences.</description></item><item><title>Developing a Whiley-to-JavaScript Translator</title><link>https://whileydave.com/publications/slater15_engr489/</link><pubDate>Thu, 01 Jan 2015 00:00:00 +0000</pubDate><guid>https://whileydave.com/publications/slater15_engr489/</guid><description>Abstract. Executing Whiley in the web browser requires a server for processing. With many people using Whiley in the web browser simultaneously, this server can become very slow. JavaScript is programming language designed to execute in the web browser without a server.</description></item><item><title>Identifying Redundant Test Cases</title><link>https://whileydave.com/publications/shaw15_engr489/</link><pubDate>Thu, 01 Jan 2015 00:00:00 +0000</pubDate><guid>https://whileydave.com/publications/shaw15_engr489/</guid><description>Abstract. This project investigates tracing the method call information of Java JUnit Tests and using the information to identify redundant tests in a test suite. There are a variety of different methods implemented (and experimented on) to identify redundancy within a suite.</description></item><item><title>Integer Range Analysis for Whiley on Embedded Systems</title><link>https://whileydave.com/publications/pea15_seus/</link><pubDate>Thu, 01 Jan 2015 00:00:00 +0000</pubDate><guid>https://whileydave.com/publications/pea15_seus/</guid><description>Abstract: Programs written in the Whiley programming language are verified at compile-time to ensure all function specifications are met. The purpose of doing this is to eliminate as many software bugs as possible and, thus, Whiley is ideally suited for use in safety-critical systems.</description></item><item><title>Some Usability Hypotheses for Verification</title><link>https://whileydave.com/publications/pea15_plateau/</link><pubDate>Thu, 01 Jan 2015 00:00:00 +0000</pubDate><guid>https://whileydave.com/publications/pea15_plateau/</guid><description>Abstract: The idea of specifying and verifying software to eliminate errors has been studied extensively over the last three decades or more. Recent advances in automated theorem proving have given rise to a range of new verification tools being developed.</description></item><item><title>The Whiley Rewrite Language (WyRL)</title><link>https://whileydave.com/publications/pea15_sle/</link><pubDate>Thu, 01 Jan 2015 00:00:00 +0000</pubDate><guid>https://whileydave.com/publications/pea15_sle/</guid><description>Abstract: The Whiley Rewrite Language (WyRL) is a standalone tool providing a domain-specific declarative rewrite language and code generator. The tool is currently used to generate a critical component of the Whiley verifying compiler, namely the automated theorem prover.</description></item><item><title>Demonstrating Whiley on an Embedded System</title><link>https://whileydave.com/publications/stevens14_engr489/</link><pubDate>Wed, 01 Jan 2014 00:00:00 +0000</pubDate><guid>https://whileydave.com/publications/stevens14_engr489/</guid><description>Abstract. Developing and verifying the software for safety critical embedded systems can be difficult and expensive due to unique constraints, including limited RAM and minimalist operating systems. This report looks at Whiley, a verifying compiler, which is intended to improve the correctness of code on a variety of systems.</description></item><item><title>Verifying Whiley Programs using an Off-the-Shelf SMT Solver</title><link>https://whileydave.com/publications/wylde14_engr489/</link><pubDate>Wed, 01 Jan 2014 00:00:00 +0000</pubDate><guid>https://whileydave.com/publications/wylde14_engr489/</guid><description>Abstract. This project investigated the integration of external theorem proving tools with Whiley â€” specifically, Satisfiability Modulo Theories (SMT) solvers â€” to increase the number of verifiable Whiley programs. The current verifier, the Whiley Constraint Solver (WyCS), is limited and hence there is a difficulty in verifying Whiley programs.</description></item><item><title>Dave Pearce on Whiley</title><link/><pubDate>Wed, 05 Jun 2013 00:00:00 +0000</pubDate><guid/><description/></item><item><title>Writing Loop Invariants in Whiley</title><link/><pubDate>Sun, 27 Jan 2013 00:00:00 +0000</pubDate><guid/><description/></item><item><title>A Calculus for Constraint-Based Flow Typing</title><link>https://whileydave.com/publications/pea13_ftfjp/</link><pubDate>Tue, 01 Jan 2013 00:00:00 +0000</pubDate><guid>https://whileydave.com/publications/pea13_ftfjp/</guid><description>Abstract: Flow typing offers an alternative to traditional Hindley-Milner type inference. A key distinction is that variables may have different types at different program points. Flow typing systems are typically formalised in the style of a dataflow analysis.</description></item><item><title>Compiling Whiley Programs for a General Purpose GPU</title><link>https://whileydave.com/publications/ruarus13_engr489/</link><pubDate>Tue, 01 Jan 2013 00:00:00 +0000</pubDate><guid>https://whileydave.com/publications/ruarus13_engr489/</guid><description>Abstract. This project investigates improving the performance of Whiley programs by executing portions of these programs on GPUs while maintaining as closely as possible the semantics of the language. Programs written in languages such as Whiley are typically not well suited to execution on GPUs which exhibit large-scale data parallelism in contrast to small-scale task parallelism seen on CPUs.</description></item><item><title>Reflections on Verifying Software with Whiley</title><link>https://whileydave.com/publications/pg13_ftscs/</link><pubDate>Tue, 01 Jan 2013 00:00:00 +0000</pubDate><guid>https://whileydave.com/publications/pg13_ftscs/</guid><description>Abstract: An ongoing challenge for computer science is the development of a tool which automatically verifies that programs meet their specifications, and are free from runtime errors such as divide-by-zero, array out-of-bounds and null dereferences.</description></item><item><title>Whiley: a Platform for Research in Software Verification</title><link>https://whileydave.com/publications/pg13_sle/</link><pubDate>Tue, 01 Jan 2013 00:00:00 +0000</pubDate><guid>https://whileydave.com/publications/pg13_sle/</guid><description>Abstract: An ongoing challenge for computer science is the development of a tool which automatically verifies programs meet their specifications, and are free from runtime errors such as divide-by-zero, array out-of-bounds and null dereferences.</description></item><item><title>The Whiley Programming Language</title><link/><pubDate>Tue, 20 Dec 2011 00:00:00 +0000</pubDate><guid/><description/></item><item><title>Implementing a Language with Flow-Sensitive and Structural Typing on the JVM</title><link>https://whileydave.com/publications/pn11_bytecode/</link><pubDate>Sat, 01 Jan 2011 00:00:00 +0000</pubDate><guid>https://whileydave.com/publications/pn11_bytecode/</guid><description>Abstract. Dynamically typed languages are flexible and impose few burdens on the programmer. In contrast, static typing leads to software that is more efficient and has fewer errors. However, static type systems traditionally require every variable to have one type, and that relationships between types (e.</description></item><item><title>Integrating the Actor Model into the Whiley Programming Language</title><link>https://whileydave.com/publications/jones11_engr489/</link><pubDate>Sat, 01 Jan 2011 00:00:00 +0000</pubDate><guid>https://whileydave.com/publications/jones11_engr489/</guid><description>Abstract. Introducing concurrent behaviour into a program tends to also introduce unpredictable behaviour. The actor model is an attempt to simplify concurrency and reduce such problems. The Whiley programming language is structured around concurrent processes, which are analogous to actors, but it runs on top of the Java Virtual Machine, which does not provide support for the model.</description></item><item><title>Short Demonstration of The Whiley Programming Language</title><link/><pubDate>Tue, 10 Aug 2010 00:00:00 +0000</pubDate><guid/><description/></item><item><title>Whiley</title><link>https://whileydave.com/projects/whiley/</link><pubDate>Fri, 01 Jan 2010 00:00:00 +0000</pubDate><guid>https://whileydave.com/projects/whiley/</guid><description>Whiley is a hybrid imperative and functional programming language which has been under development since 2009. Find out more at whiley.org or try it online at whileylabs.com. The complete source code for the compiler and theorem prover is available on GitHub.</description></item></channel></rss>