<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>jpure on Dave's Homepage</title><link>https://whileydave.com/tags/jpure/</link><description>Recent content in jpure on Dave's Homepage</description><generator>Hugo -- gohugo.io</generator><language>en-nz</language><lastBuildDate>Fri, 01 Jul 2011 00:00:00 +0000</lastBuildDate><atom:link href="https://whileydave.com/tags/jpure/index.xml" rel="self" type="application/rss+xml"/><item><title>Version 0.2</title><link>https://whileydave.com/downloads/jpure-110711/</link><pubDate>Fri, 01 Jul 2011 00:00:00 +0000</pubDate><guid>https://whileydave.com/downloads/jpure-110711/</guid><description/></item><item><title>JPure: a Modular Purity System for Java</title><link>https://whileydave.com/publications/pea11_cc/</link><pubDate>Sat, 01 Jan 2011 00:00:00 +0000</pubDate><guid>https://whileydave.com/publications/pea11_cc/</guid><description>Abstract: Purity Analysis is the problem of determining whether or not a method may have side-effects. This has applications in automatic parallelisation, extended static checking, and more. We present a novel purity system for Java that employs purity annotations which can be checked modularly.</description></item><item><title>Version 0.1</title><link>https://whileydave.com/downloads/jpure-210410/</link><pubDate>Fri, 01 Oct 2010 00:00:00 +0000</pubDate><guid>https://whileydave.com/downloads/jpure-210410/</guid><description/></item><item><title>JPure</title><link>https://whileydave.com/projects/jpure/</link><pubDate>Fri, 01 Jan 2010 00:00:00 +0000</pubDate><guid>https://whileydave.com/projects/jpure/</guid><description>Purity Analysis is the problem of determining whether or not a method may have side-effects. This has applications in automatic parallelisation, extended static checking, and more. JPure is a novel purity system for Java that employs purity annotations which can be checked modularly.</description></item></channel></rss>