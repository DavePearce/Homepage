<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Projects on Dave's Homepage</title><link>https://davepearce.github.io/Homepage/projects/</link><description>Recent content in Projects on Dave's Homepage</description><generator>Hugo -- gohugo.io</generator><language>en-nz</language><lastBuildDate>Fri, 13 Oct 2017 20:31:39 -0500</lastBuildDate><atom:link href="https://davepearce.github.io/Homepage/projects/index.xml" rel="self" type="application/rss+xml"/><item><title>Whiley</title><link>https://davepearce.github.io/Homepage/projects/whiley/</link><pubDate>Fri, 01 Jan 2010 00:00:00 +0000</pubDate><guid>https://davepearce.github.io/Homepage/projects/whiley/</guid><description>Whiley is a hybrid imperative and functional programming language which has been under development since 2009. Find out more at whiley.org or try it online at whileylabs.com. The complete source code for the compiler and theorem prover is available on GitHub. There is also a Wikipedia page and a dedicated Reddit group.</description></item><item><title>The Java Compiler Kit</title><link>https://davepearce.github.io/Homepage/projects/jkit/</link><pubDate>Tue, 01 Jan 2008 00:00:00 +0000</pubDate><guid>https://davepearce.github.io/Homepage/projects/jkit/</guid><description>The Java Compiler Kit is a straightforward implementation of a Java compiler, designed with extensibility in mind. In building the JKit compiler, the aims were: firstly, to help with teaching compilers by considering an implementation for a fully fledged language (Java), rather than a stripped-down imitation language; secondly, to aid research in programming languages, compilers and verification. With JKit you can easily prototype new extensions to the Java language, or implement completely new languages and compile them down to Java Bytecode.</description></item><item><title>Computing Tutte Polynomials</title><link>https://davepearce.github.io/Homepage/projects/tutte/</link><pubDate>Sun, 01 Jan 2006 00:00:00 +0000</pubDate><guid>https://davepearce.github.io/Homepage/projects/tutte/</guid><description>Overview. Tutte polynomials play an important role in graph theory, combinatorics, matroid theory, knot theory, and experimental physics. For example, the polynomials can be evaluated to find the number of spanning trees in a graph, the number of forests in a graph, the number of connected spanning subgraphs, the number of spanning subgraphs, and the number of acyclic orientations. In addition, Tutte polynomials specialise to chromatic polynomials, flow polynomials, Jones polynomials for alternating links, and partition functions of the q-state Potts model from statistical physics.</description></item><item><title>Dynamic Topological Sort</title><link>https://davepearce.github.io/Homepage/projects/dts/</link><pubDate>Thu, 01 Jan 2004 00:00:00 +0000</pubDate><guid>https://davepearce.github.io/Homepage/projects/dts/</guid><description>The problem of topologically sorting a directed graph is about arranging its nodes so that all edges go in the same direction. For example, consider the following directed graph:
A topological sort of this graph is:
There are often many possible solutions for a given graph and we are simply interested in obtaining one of them. This is a well-known problem and optimal algorithms are known which need O(v+e) time, where v is the number of nodes and e the number of edges.</description></item><item><title>DJProf</title><link>https://davepearce.github.io/Homepage/projects/djprof/</link><pubDate>Wed, 01 Jan 2003 00:00:00 +0000</pubDate><guid>https://davepearce.github.io/Homepage/projects/djprof/</guid><description>DJProf is an experimental Java profiling tool which employs AspectJ to insert the necessary instrumentation for profiling rather than, for example, the Java Machine Profiler Interface (JVMPI). DJProf can be used to profile Java programs without modification (i.e. there is no need to recompile them for profiling) and does not require the user to have any knowledge of AspectJ. The Load-Time Weaving capability of AspectJ is utilised to make this possible.</description></item><item><title>GILK</title><link>https://davepearce.github.io/Homepage/projects/gilk/</link><pubDate>Sat, 01 Jan 2000 00:00:00 +0000</pubDate><guid>https://davepearce.github.io/Homepage/projects/gilk/</guid><description>The GILK project was part of my master&amp;rsquo;s thesis at Imperial College London. The project is all about dynamic instrumentation of the Linux Kernel. This means that a stock (i.e. without any source code modification) kernel can be instrumented whilst in execution! This is possible because the tool performs binary analysis on the kernel image to determine where it is safe to instrument. Furthermore, it makes use of the non-premtive property of the kernel to ensure that the instrumentation is safely updated.</description></item></channel></rss>