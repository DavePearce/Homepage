<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Blog on Dave's Homepage</title><link>https://whileydave.com/blog/</link><description>Recent content in Blog on Dave's Homepage</description><generator>Hugo -- gohugo.io</generator><language>en-nz</language><lastBuildDate>Fri, 13 Oct 2017 20:31:39 -0500</lastBuildDate><atom:link href="https://whileydave.com/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>Type Checking in Whiley goes Both Ways!</title><link>https://whileydave.com/2022/06/15/type-checking-in-whiley-goes-both-ways/</link><pubDate>Wed, 15 Jun 2022 00:00:00 +0000</pubDate><guid>https://whileydave.com/2022/06/15/type-checking-in-whiley-goes-both-ways/</guid><description>Type checking in Whiley is a curious thing as it goes both forwards and backwards. This is sometimes referred to as bidirectional type checking (see e.g. here and here). This is surprisingly useful in Whiley (perhaps because the language has a reasonably unusual feature set).</description></item><item><title>Whiley gets Rusty!</title><link>https://whileydave.com/2022/05/31/whiley-gets-rusty/</link><pubDate>Tue, 31 May 2022 00:00:00 +0000</pubDate><guid>https://whileydave.com/2022/05/31/whiley-gets-rusty/</guid><description>I&amp;rsquo;ve been learning Rust for a while now but, at the same time, trying to continue developing Whiley. Since Whiley was written entirely in Java, these activities were mutually exclusive and it was frustrating trying to balance things!</description></item><item><title>Verifying an Auction Contract in Whiley</title><link>https://whileydave.com/2022/05/17/verifying-an-auction-contract-in-whiley/</link><pubDate>Tue, 17 May 2022 00:00:00 +0000</pubDate><guid>https://whileydave.com/2022/05/17/verifying-an-auction-contract-in-whiley/</guid><description>Since Whiley is a general purpose verification system, I thought it might be interesting to try and verify a smart contract. Smart contracts are well suited to formal verification tools (like Whiley), as they are small and typically self-contained.</description></item><item><title>Puzzling Strong Updates in Rust</title><link>https://whileydave.com/2022/04/27/puzzling-strong-updates-in-rust/</link><pubDate>Wed, 27 Apr 2022 00:00:00 +0000</pubDate><guid>https://whileydave.com/2022/04/27/puzzling-strong-updates-in-rust/</guid><description>The idea of a strong update comes from earlier work on static analysis and, in particular, pointer analysis. To understand this, let&amp;rsquo;s imagine a hypothetical non-null analysis for C:
int* r = (int*) malloc(sizeof(int)); int** p = &amp;amp;r; At this point, our non-null analysis would conclude that p was nonnull and that r was nullable.</description></item><item><title>Modelling Borrow Checking in Rust</title><link>https://whileydave.com/2021/12/06/modelling-borrow-checking-in-rust/</link><pubDate>Mon, 06 Dec 2021 00:00:00 +0000</pubDate><guid>https://whileydave.com/2021/12/06/modelling-borrow-checking-in-rust/</guid><description>Recently, I&amp;rsquo;ve been working on a formalisation of borrow checking in Rust. The idea is to help people think clearly about how borrow checking works (in someways perhaps similar to the Stacked Borrows work but with a different perspective).</description></item><item><title>Verifying the Whiley Standard Library</title><link>https://whileydave.com/2021/10/27/verifying-the-whiley-standard-library/</link><pubDate>Wed, 27 Oct 2021 00:00:00 +0000</pubDate><guid>https://whileydave.com/2021/10/27/verifying-the-whiley-standard-library/</guid><description>For sometime now, its been possible to use Boogie / Z3 as a backend for verifying Whiley programs. Initially that was pretty sketchy, but it&amp;rsquo;s really starting to ramp up now.</description></item><item><title>Test-Driving the Rust Model Checker (RMC)</title><link>https://whileydave.com/2021/10/26/test-driving-the-rust-model-checker-rmc/</link><pubDate>Tue, 26 Oct 2021 00:00:00 +0000</pubDate><guid>https://whileydave.com/2021/10/26/test-driving-the-rust-model-checker-rmc/</guid><description>The Rust Model Checker (RMC) allows Rust programs to be model checked using the C Bounded Model Checker (CBMC). In essence, RMC is an extension to the Rust compiler which converts Rust&amp;rsquo;s MIR into the input language of CBMC (GOTO).</description></item><item><title>Fooling the Borrow Checker</title><link>https://whileydave.com/2021/09/01/fooling-the-borrow-checker/</link><pubDate>Wed, 01 Sep 2021 00:00:00 +0000</pubDate><guid>https://whileydave.com/2021/09/01/fooling-the-borrow-checker/</guid><description>An interesting question is how the Rust borrow checker decides when a borrow could still be live. This illustrates a simple example:
let mut x = 1234; let z = f(&amp;amp;x); .</description></item><item><title>Sizing Up Types in Rust</title><link>https://whileydave.com/2021/07/15/sizing-up-types-in-rust/</link><pubDate>Thu, 15 Jul 2021 00:00:00 +0000</pubDate><guid>https://whileydave.com/2021/07/15/sizing-up-types-in-rust/</guid><description>When learning Rust, understanding the difference between statically and dynamically sized types seems critical. There are some good discussions out there already (e.g. here and here). Whilst these explain the mechanics, they didn&amp;rsquo;t tell me why its done like this in Rust.</description></item><item><title>Understanding Generic Type Variance (in Whiley)</title><link>https://whileydave.com/2021/03/14/understanding-generic-type-variance-in-whiley/</link><pubDate>Sun, 14 Mar 2021 00:00:00 +0000</pubDate><guid>https://whileydave.com/2021/03/14/understanding-generic-type-variance-in-whiley/</guid><description>For languages which support generic types, an important question is deciding whether or not a type C&amp;lt;T&amp;gt; is a subtype of another related type C&amp;lt;S&amp;gt;. Since Whiley was recently extended to support generic types, its interesting to think about how this was handled.</description></item><item><title>Dynamic Cycle Detection for Lock Ordering</title><link>https://whileydave.com/2020/12/19/dynamic-cycle-detection-for-lock-ordering/</link><pubDate>Sat, 19 Dec 2020 00:00:00 +0000</pubDate><guid>https://whileydave.com/2020/12/19/dynamic-cycle-detection-for-lock-ordering/</guid><description>Recently, I discovered that an algorithm of mine from a few years back is being used in both TensorFlow and the Abseil C++ library (see here and here). That is of course pretty exciting since they are both widely used libraries!</description></item><item><title>Automated Testing for Whiley</title><link>https://whileydave.com/2020/12/02/automated-testing-for-whiley/</link><pubDate>Wed, 02 Dec 2020 00:00:00 +0000</pubDate><guid>https://whileydave.com/2020/12/02/automated-testing-for-whiley/</guid><description>Recently, the online editor for Whiley was updated with some new features. Actually, the update represents a complete rewrite of the front-end in Whiley. Obviously, I am very excited about that!</description></item><item><title>Understanding Partial Moves in Rust</title><link>https://whileydave.com/2020/11/30/understanding-partial-moves-in-rust/</link><pubDate>Mon, 30 Nov 2020 00:00:00 +0000</pubDate><guid>https://whileydave.com/2020/11/30/understanding-partial-moves-in-rust/</guid><description>Recently I&amp;rsquo;ve been digging into Rust and, whilst it&amp;rsquo;s a great language on many fronts, I do find lots of hidden complexity. One example which doesn&amp;rsquo;t get much attention is partial moves.</description></item><item><title>The Semantics of Semantic Versioning?</title><link>https://whileydave.com/2020/09/24/the-semantics-of-semantic-versioning/</link><pubDate>Thu, 24 Sep 2020 00:00:00 +0000</pubDate><guid>https://whileydave.com/2020/09/24/the-semantics-of-semantic-versioning/</guid><description>Semantic versioning is a surprisingly interesting topic when you get into it. Recently, myself and a few colleagues (Patrick &amp;amp; Jens) have been giving it some thought (and we even wrote an essay on it)!</description></item><item><title>Whiley is Ten Years Old!</title><link>https://whileydave.com/2020/09/01/whiley-is-ten-years-old/</link><pubDate>Tue, 01 Sep 2020 00:00:00 +0000</pubDate><guid>https://whileydave.com/2020/09/01/whiley-is-ten-years-old/</guid><description>The first commit recorded in the WhileyCompiler repository on Github is dated June 25th, 2010. That means Whiley has been going for just over ten years already! Wow, time sure does fly.</description></item><item><title>Verifying leftPad() in Whiley</title><link>https://whileydave.com/2018/04/23/verifying-leftpad-in-whiley/</link><pubDate>Mon, 23 Apr 2018 00:00:00 +0000</pubDate><guid>https://whileydave.com/2018/04/23/verifying-leftpad-in-whiley/</guid><description>The leftPad(string,int) function simply pads a string up to a given size by inserted spaces at the beginning. For example, leftPad(&amp;quot;hello&amp;quot;,8) produces &amp;quot; hello&amp;quot;. This little function shot to fame in 2016 when a developer pulled all his modules from NPM, of which one provided the leftPad() functionality.</description></item><item><title>Verifying Bubble Sort in Whiley</title><link>https://whileydave.com/2017/12/19/verifying-bubble-sort-in-whiley/</link><pubDate>Tue, 19 Dec 2017 00:00:00 +0000</pubDate><guid>https://whileydave.com/2017/12/19/verifying-bubble-sort-in-whiley/</guid><description>Bubble sort is a classic sorting algorithm with lots of well-known issues. It&amp;rsquo;s been a long time since I thought much about this algorithm. But, it turns out to be an interesting verification example for Whiley, as it has some interesting loop invariants.</description></item><item><title>On the Internet and Object-Oriented Programming</title><link>https://whileydave.com/2017/06/21/on-the-internet-and-object-oriented-programming/</link><pubDate>Wed, 21 Jun 2017 00:00:00 +0000</pubDate><guid>https://whileydave.com/2017/06/21/on-the-internet-and-object-oriented-programming/</guid><description>The rise of the internet over the last, say, two decades has been pretty unstoppable (we all know that). But, is it now affecting the prominence of object-oriented programming? I&amp;rsquo;m going to try and argue in this post that: yes, it is.</description></item><item><title>Property Syntax in Whiley</title><link>https://whileydave.com/2017/03/28/property-syntax-in-whiley/</link><pubDate>Tue, 28 Mar 2017 00:00:00 +0000</pubDate><guid>https://whileydave.com/2017/03/28/property-syntax-in-whiley/</guid><description>Recently, I gave a demo which showed off thew new &amp;ldquo;Property Syntax&amp;rdquo; in Whiley. Whilst this is still in the devel branch it will make its way, soon enough, into the next release.</description></item><item><title>On Memory Management and Rust</title><link>https://whileydave.com/2017/02/15/on-memory-management-and-rust/</link><pubDate>Wed, 15 Feb 2017 00:00:00 +0000</pubDate><guid>https://whileydave.com/2017/02/15/on-memory-management-and-rust/</guid><description>Rust is definitely one of the more interesting new programming language I&amp;rsquo;ve come across recently. Memory management is definitely Rust&amp;rsquo;s &amp;ldquo;thing&amp;rdquo;, and the language wants to have its cake and eat it (so to speak).</description></item><item><title>Understanding Effective Unions in Whiley</title><link>https://whileydave.com/2016/12/09/understanding-effective-unions-in-whiley/</link><pubDate>Fri, 09 Dec 2016 00:00:00 +0000</pubDate><guid>https://whileydave.com/2016/12/09/understanding-effective-unions-in-whiley/</guid><description>The concept of effective union types in Whiley exposes some interesting features worth considering. In particular, they result in a separation between the readable and writeable view of a type. But, we&amp;rsquo;re getting ahead of ourselves!</description></item><item><title>Mixfix Function Syntax for Whiley</title><link>https://whileydave.com/2016/11/15/mixfix-function-syntax-for-whiley/</link><pubDate>Tue, 15 Nov 2016 00:00:00 +0000</pubDate><guid>https://whileydave.com/2016/11/15/mixfix-function-syntax-for-whiley/</guid><description>Today I saw an interesting talk about mix-fix function syntax. The idea is to allow a more complex syntax for declaring and calling functions, rather than the very common &amp;ldquo;uniform&amp;rdquo; style.</description></item><item><title>Program Specification in Practice?</title><link>https://whileydave.com/2016/09/01/program-specification-in-practice/</link><pubDate>Thu, 01 Sep 2016 00:00:00 +0000</pubDate><guid>https://whileydave.com/2016/09/01/program-specification-in-practice/</guid><description>Recently, as part of our Programming Languages Reading group, we looked at the paper &amp;ldquo;Contracts in Practice&amp;rdquo; by Estler et al., (see here for a copy). This is quite an interesting paper and the authors perform an empirical investigation as to how contracts are used by programmers in practice.</description></item><item><title>Reference Lifetimes in Whiley</title><link>https://whileydave.com/2016/05/28/reference-lifetimes-in-whiley/</link><pubDate>Sat, 28 May 2016 00:00:00 +0000</pubDate><guid>https://whileydave.com/2016/05/28/reference-lifetimes-in-whiley/</guid><description>The concept of lifetimes was pioneered in the Rust programming language, and builds on earlier notions of regions and ownership types. Lifetimes are considered one of Rust&amp;rsquo;s &amp;ldquo;most unique and compelling features&amp;rdquo;.</description></item><item><title>Contractive and Uninhabited Types in Whiley</title><link>https://whileydave.com/2016/04/21/contractive-and-uninhabited-types-in-whiley/</link><pubDate>Thu, 21 Apr 2016 00:00:00 +0000</pubDate><guid>https://whileydave.com/2016/04/21/contractive-and-uninhabited-types-in-whiley/</guid><description>An interesting feature of Whiley is that it supports true recursive types. These are surprisingly tricky to get right, and recently we came across some interesting examples that the Whiley compiler should (but doesn&amp;rsquo;t) check for.</description></item><item><title>Encoding C Strings in Whiley</title><link>https://whileydave.com/2015/11/12/encoding-c-strings-in-whiley/</link><pubDate>Thu, 12 Nov 2015 00:00:00 +0000</pubDate><guid>https://whileydave.com/2015/11/12/encoding-c-strings-in-whiley/</guid><description>In this post, we&amp;rsquo;re going to consider representing the classic C string in Whiley. This turns out to be useful as we can then try to verify properties about functions which operate on C strings (e.</description></item><item><title>Introductory Lecture on Verification in Whiley</title><link>https://whileydave.com/2015/09/22/introductory-lecture-on-verification-in-whiley/</link><pubDate>Tue, 22 Sep 2015 00:00:00 +0000</pubDate><guid>https://whileydave.com/2015/09/22/introductory-lecture-on-verification-in-whiley/</guid><description>We&amp;rsquo;ve started using Whiley again in my second year course Formal Foundations of Programming. The aim of this course is to introduce students into a range of techniques related to software correctness.</description></item><item><title>My ATtiny85 Games Console</title><link>https://whileydave.com/2015/01/27/my-attiny85-games-console/</link><pubDate>Tue, 27 Jan 2015 00:00:00 +0000</pubDate><guid>https://whileydave.com/2015/01/27/my-attiny85-games-console/</guid><description>One my goals for Whiley in 2015 is to focus more on embedded systems (see here for more). A recent project of ours was compiling Whiley code to run on a QuadCopter and this identified several challenges here.</description></item><item><title>Verification with Data from Untrusted Sources</title><link>https://whileydave.com/2014/12/09/verification-with-data-from-untrusted-sources/</link><pubDate>Tue, 09 Dec 2014 00:00:00 +0000</pubDate><guid>https://whileydave.com/2014/12/09/verification-with-data-from-untrusted-sources/</guid><description>Recently, I was listening to the latest edition of the Illegal Argument podcast, and it turns out they were discussing Whiley! (about 103:16 minutes in). The discussion was about how verification interacts with data from an untrusted source (e.</description></item><item><title>Loop Variant Relations</title><link>https://whileydave.com/2014/07/10/loop-variant-relations/</link><pubDate>Thu, 10 Jul 2014 00:00:00 +0000</pubDate><guid>https://whileydave.com/2014/07/10/loop-variant-relations/</guid><description>Proving that a loop always terminates is a common requirement when verifying software. The usual approach to doing this is to provide a loop variant function. This is typically an integer expression which decreases on every iteration of the loop.</description></item><item><title>Understanding Ghost Variables in Software Verification</title><link>https://whileydave.com/2014/06/20/understanding-ghost-variables-in-software-verification/</link><pubDate>Fri, 20 Jun 2014 00:00:00 +0000</pubDate><guid>https://whileydave.com/2014/06/20/understanding-ghost-variables-in-software-verification/</guid><description>Verification tools often support the use of ghost variables to help in the verification process. A ghost variable is not needed for the program to execute, and will not be compiled into object code.</description></item><item><title>Loop Invariants and Do/While Statements</title><link>https://whileydave.com/2014/05/15/loop-invariants-and-do/while-statements/</link><pubDate>Thu, 15 May 2014 00:00:00 +0000</pubDate><guid>https://whileydave.com/2014/05/15/loop-invariants-and-do/while-statements/</guid><description>Recently, I encountered what I thought was a bug in the Whiley Compiler. The issue related to the current treatment of do/while loops and loop invariants. Having now spent a fair bit of time researching the issue, the answer is not so clear.</description></item><item><title>Loop invariants and Break Statements</title><link>https://whileydave.com/2014/05/02/loop-invariants-and-break-statements/</link><pubDate>Fri, 02 May 2014 00:00:00 +0000</pubDate><guid>https://whileydave.com/2014/05/02/loop-invariants-and-break-statements/</guid><description>In this article, I&amp;rsquo;ll look at some interesting issues relating to the use of break statements within loops, and how this affects the idea of a loop invariant. For some general background on writing loop invariants in Whiley, see my previous post.</description></item><item><title>Thoughts on Parsing Whiley (and Indentation Syntax)</title><link>https://whileydave.com/2014/01/23/thoughts-on-parsing-whiley-and-indentation-syntax/</link><pubDate>Thu, 23 Jan 2014 00:00:00 +0000</pubDate><guid>https://whileydave.com/2014/01/23/thoughts-on-parsing-whiley-and-indentation-syntax/</guid><description>Recently, I have been reworking the Whiley compiler&amp;rsquo;s parser to make it more robust. Doing this has opened up some interesting issues, which I thought were worth discussing. Whiley uses indentation syntax without explicit end-of-statement terminators (e.</description></item><item><title>Thoughts on Writing Loop Invariants</title><link>https://whileydave.com/2013/11/19/thoughts-on-writing-loop-invariants/</link><pubDate>Tue, 19 Nov 2013 00:00:00 +0000</pubDate><guid>https://whileydave.com/2013/11/19/thoughts-on-writing-loop-invariants/</guid><description>As the Whiley system is taking better shape every day, I&amp;rsquo;m starting to play around more and discover things. In particular, there are some surprising issues surrounding while loops and their loop invariants.</description></item><item><title>The Dafny Tutorial at SPLASH'13</title><link>https://whileydave.com/2013/11/01/the-dafny-tutorial-at-splash13/</link><pubDate>Fri, 01 Nov 2013 00:00:00 +0000</pubDate><guid>https://whileydave.com/2013/11/01/the-dafny-tutorial-at-splash13/</guid><description>Today I was attending the Dafny tutorial given by Rustan Leino at SPLASH'13. I have to say that this was the highlight of the conference for me. In case you haven&amp;rsquo;t come across it before, Dafny is a programming language designed for software verification.</description></item><item><title>Understanding why Union Types are useful</title><link>https://whileydave.com/2013/07/31/understanding-why-union-types-are-useful/</link><pubDate>Wed, 31 Jul 2013 00:00:00 +0000</pubDate><guid>https://whileydave.com/2013/07/31/understanding-why-union-types-are-useful/</guid><description>The Whiley programming language uses union types as a way of combining types together. Here&amp;rsquo;s a simple example to illustrate:
function indexOf(string str, char c) =&amp;gt; null|int: for i in 0.</description></item><item><title>The Architecture of Verification in Whiley</title><link>https://whileydave.com/2013/06/26/the-architecture-of-verification-in-whiley/</link><pubDate>Wed, 26 Jun 2013 00:00:00 +0000</pubDate><guid>https://whileydave.com/2013/06/26/the-architecture-of-verification-in-whiley/</guid><description>As the Whiley compiler continues to evolve, certain aspects of its architecture are really starting to mature. One of the more recent pieces to take shape is the verification pipeline. This is the process by which a Whiley file is converted into a series of verification conditions, which are then checked by the automated theorem prover.</description></item><item><title>Whiley at the Melbourne Java User Group</title><link>https://whileydave.com/2013/06/19/whiley-at-the-melbourne-java-user-group/</link><pubDate>Wed, 19 Jun 2013 00:00:00 +0000</pubDate><guid>https://whileydave.com/2013/06/19/whiley-at-the-melbourne-java-user-group/</guid><description>A few weeks ago, I was in Melbourne attending the Australasian Software Engineering Conference and, whilst I was there, I gave a talk on Whiley at the Melbourne Java Users Group.</description></item><item><title>Input / Output and the Object-Oriented Paradigm</title><link>https://whileydave.com/2013/05/16/input-/-output-and-the-object-oriented-paradigm/</link><pubDate>Thu, 16 May 2013 00:00:00 +0000</pubDate><guid>https://whileydave.com/2013/05/16/input-/-output-and-the-object-oriented-paradigm/</guid><description>Today, more then ever before, I/O dominates what software is about. Of course, it&amp;rsquo;s always been important but, with increasing bandwidths, I/O seems to be what most programs now spend most of their time doing.</description></item><item><title>Compile-Time Verification and I/O</title><link>https://whileydave.com/2013/04/09/compile-time-verification-and-i/o/</link><pubDate>Tue, 09 Apr 2013 00:00:00 +0000</pubDate><guid>https://whileydave.com/2013/04/09/compile-time-verification-and-i/o/</guid><description>A surprisingly common question people ask me when I talk about compile-time checking of pre-/post-conditions and invariants is: how do you deal with I/O?
To understand what the difficulty is, let&amp;rsquo;s consider a simple example in Whiley:</description></item><item><title>Whiley Puzzler</title><link>https://whileydave.com/2013/01/14/whiley-puzzler/</link><pubDate>Mon, 14 Jan 2013 00:00:00 +0000</pubDate><guid>https://whileydave.com/2013/01/14/whiley-puzzler/</guid><description>I was having an interesting discussion with a colleague today about various aspects of Whiley, and we came up with an interesting bit of example code which is something of a puzzler.</description></item><item><title>Whiley Features in the Dominion Post!</title><link>https://whileydave.com/2013/01/10/whiley-features-in-the-dominion-post/</link><pubDate>Thu, 10 Jan 2013 00:00:00 +0000</pubDate><guid>https://whileydave.com/2013/01/10/whiley-features-in-the-dominion-post/</guid><description>Today&amp;rsquo;s edition of the Dominion Post (Wellington&amp;rsquo;s Local Newspaper) features a nice article on Whiley:
Obviously, I&amp;rsquo;m very excited to see Whiley being talked about in our local newspaper, and I think the article does a nice job of it.</description></item><item><title>A Source File with 72KLOC!?</title><link>https://whileydave.com/2012/12/11/a-source-file-with-72kloc/</link><pubDate>Tue, 11 Dec 2012 00:00:00 +0000</pubDate><guid>https://whileydave.com/2012/12/11/a-source-file-with-72kloc/</guid><description>Yesterday, I was looking at the stats on Ohloh for the Whiley project and noticed that my total line count for the project had increased from around 65KLOCto 143KLOC over a very short amount of time:</description></item><item><title>Generating Verification Conditions for Whiley</title><link>https://whileydave.com/2012/12/04/generating-verification-conditions-for-whiley/</link><pubDate>Tue, 04 Dec 2012 00:00:00 +0000</pubDate><guid>https://whileydave.com/2012/12/04/generating-verification-conditions-for-whiley/</guid><description>Probably the most interesting aspect of the Whiley language is that it supports compile-time verification of preconditions, postconditions and other invariants. There are two main aspects of how this works:</description></item><item><title>Comparing I/O in C with Java</title><link>https://whileydave.com/2012/11/28/comparing-i/o-in-c-with-java/</link><pubDate>Wed, 28 Nov 2012 00:00:00 +0000</pubDate><guid>https://whileydave.com/2012/11/28/comparing-i/o-in-c-with-java/</guid><description>Recently, I was having a somewhat heated discussion with a friend about the Java I/O library (specificially java.io.*). His position was that the library is unnecessarily cluttered and verbose, and that I/O in C is much simpler and more productive.</description></item><item><title>Formalising Flow Typing with Union, Intersection and Negation Types</title><link>https://whileydave.com/2012/10/31/formalising-flow-typing-with-union-intersection-and-negation-types/</link><pubDate>Wed, 31 Oct 2012 00:00:00 +0000</pubDate><guid>https://whileydave.com/2012/10/31/formalising-flow-typing-with-union-intersection-and-negation-types/</guid><description>The Whiley language takes an unusual approaching to static typing called flow typing. This helps to give Whiley the look-and-feel of a dynamically typed language. The key idea behind flow typing is to allow variables to have different types at different points in a program.</description></item><item><title>Profiling Field Initialisation in Java</title><link>https://whileydave.com/2012/09/30/profiling-field-initialisation-in-java/</link><pubDate>Sun, 30 Sep 2012 00:00:00 +0000</pubDate><guid>https://whileydave.com/2012/09/30/profiling-field-initialisation-in-java/</guid><description>Recently, I attended the annual Conference on Runtime Verification (RV2012) and gave a talk entitled &amp;ldquo;Profiling Field Initialisation in Java&amp;rdquo; (the paper itself is here). This is the work of my PhD student, Stephen Nelson, and he should take all the credit for the gory details.</description></item><item><title>A Misconception of Functional Programming?</title><link>https://whileydave.com/2012/09/06/a-misconception-of-functional-programming/</link><pubDate>Thu, 06 Sep 2012 00:00:00 +0000</pubDate><guid>https://whileydave.com/2012/09/06/a-misconception-of-functional-programming/</guid><description>Recently, I came across an article entitled &amp;ldquo;Useful Pure Functional Programming&amp;rdquo; which talks about the advantages of functional programming. However, something struck me about the way the author thinks about functional programming:</description></item><item><title>Java versus C++ Performance</title><link>https://whileydave.com/2012/08/13/java-versus-c-performance/</link><pubDate>Mon, 13 Aug 2012 00:00:00 +0000</pubDate><guid>https://whileydave.com/2012/08/13/java-versus-c-performance/</guid><description>Recently, I came across an interesting discussion of C++ versus Java performance over on Stack Exchange. There was also some good discussion of the article on Reddit which included a link to an interesting article from Google.</description></item><item><title>Whiley Interview on VBC 88.3FM</title><link>https://whileydave.com/2012/07/30/whiley-interview-on-vbc-88.3fm/</link><pubDate>Mon, 30 Jul 2012 00:00:00 +0000</pubDate><guid>https://whileydave.com/2012/07/30/whiley-interview-on-vbc-88.3fm/</guid><description>Recently, I was on VBC 88.3FM (Victoria University&amp;rsquo;s Student Radio) giving a 60s &amp;ldquo;speed summary&amp;rdquo; of my research, and generally chatting about some tech stuff. The station has been interviewing a whole range of people at the university to raise awareness of what research is going on.</description></item><item><title>The Liquid Metal Project</title><link>https://whileydave.com/2012/07/04/the-liquid-metal-project/</link><pubDate>Wed, 04 Jul 2012 00:00:00 +0000</pubDate><guid>https://whileydave.com/2012/07/04/the-liquid-metal-project/</guid><description>One of the most interesting projects I came across at PLDI/ECOOP in Beijing was the Liquid Metal project being developed at IBM&amp;rsquo;s TJ Watson Research Center. From the Liquid Metal homepage:</description></item><item><title>Groovy 2.0 uses Flow Typing!</title><link>https://whileydave.com/2012/07/01/groovy-2.0-uses-flow-typing/</link><pubDate>Sun, 01 Jul 2012 00:00:00 +0000</pubDate><guid>https://whileydave.com/2012/07/01/groovy-2.0-uses-flow-typing/</guid><description>Groovy 2.0 has just been released, and it contains something rather interesting &amp;hellip; optional flow typing! For those who don&amp;rsquo;t know much about the language, Groovy is a JVM-based dynamically typed language which is similar to Java, but more compact.</description></item><item><title>Flow Typing for References in Whiley</title><link>https://whileydave.com/2012/06/11/flow-typing-for-references-in-whiley/</link><pubDate>Mon, 11 Jun 2012 00:00:00 +0000</pubDate><guid>https://whileydave.com/2012/06/11/flow-typing-for-references-in-whiley/</guid><description>The Whiley language splits into a fully functional &amp;ldquo;core&amp;rdquo; and an imperative &amp;ldquo;outer layer&amp;rdquo;. References and objects do not exist within the functional core. However, they can exist within the imperative outer layer and are necessary for supporting state and other side-effecting computation.</description></item><item><title>Variable Scoping for Try-Catch Blocks in Whiley</title><link>https://whileydave.com/2012/05/22/variable-scoping-for-try-catch-blocks-in-whiley/</link><pubDate>Tue, 22 May 2012 00:00:00 +0000</pubDate><guid>https://whileydave.com/2012/05/22/variable-scoping-for-try-catch-blocks-in-whiley/</guid><description>A friend of mine was talking about how variable scoping for try-catch blocks in Java really frustrated him sometimes. Specifically, the problem was related to variables declared inside try blocks not being visible in their catch handlers.</description></item><item><title>Termination of Flow Typing in Whiley</title><link>https://whileydave.com/2012/04/17/termination-of-flow-typing-in-whiley/</link><pubDate>Tue, 17 Apr 2012 00:00:00 +0000</pubDate><guid>https://whileydave.com/2012/04/17/termination-of-flow-typing-in-whiley/</guid><description>Whiley uses flow typing to give it the look-and-feel of a dynamically typed language (see this page for more on flow typing). In short, flow typing means that variables can have different types at different program points.</description></item><item><title>Are Checked Exceptions Always Caused by I/O?</title><link>https://whileydave.com/2012/04/10/are-checked-exceptions-always-caused-by-i/o/</link><pubDate>Tue, 10 Apr 2012 00:00:00 +0000</pubDate><guid>https://whileydave.com/2012/04/10/are-checked-exceptions-always-caused-by-i/o/</guid><description>Recently, I&amp;rsquo;ve had the pleasure of working with Eclipse and trying to build a plugin. On the whole, I have to confess,* I find that Eclipse is an extremely well-designed and considered piece of software*.</description></item><item><title>Test to Code Ratio</title><link>https://whileydave.com/2012/03/08/test-to-code-ratio/</link><pubDate>Thu, 08 Mar 2012 00:00:00 +0000</pubDate><guid>https://whileydave.com/2012/03/08/test-to-code-ratio/</guid><description>I&amp;rsquo;ve just been watching the following talk over on InfoQ: Software Quality &amp;mdash; You know it when you see it. Thanks to Craig over at SoftViz for pointing me to it.</description></item><item><title>Commonwealth Bank of Australia (CBA) denies problem with Leap Year?</title><link>https://whileydave.com/2012/03/05/commonwealth-bank-of-australia-cba-denies-problem-with-leap-year/</link><pubDate>Mon, 05 Mar 2012 00:00:00 +0000</pubDate><guid>https://whileydave.com/2012/03/05/commonwealth-bank-of-australia-cba-denies-problem-with-leap-year/</guid><description>It&amp;rsquo;s 8:30am on the 29th Februrary, 2012. After a large number of complaints, ATM and Eftpos services are finally restored for the Commonwealth Bank of Australia (CBA). See this, this and this for more details.</description></item><item><title>Jobs versus Allen</title><link>https://whileydave.com/2012/03/05/jobs-versus-allen/</link><pubDate>Mon, 05 Mar 2012 00:00:00 +0000</pubDate><guid>https://whileydave.com/2012/03/05/jobs-versus-allen/</guid><description>I&amp;rsquo;ve recently finished Paul Allen&amp;rsquo;s excellent memoir entitled &amp;ldquo;Idea Man&amp;rdquo; and the recent biography of Steve Jobs by Walter Isaacson. Obviously, I didn&amp;rsquo;t read them at the same time &amp;hellip; but one after there other!</description></item><item><title>Type Aliasing in Java?</title><link>https://whileydave.com/2012/03/02/type-aliasing-in-java/</link><pubDate>Fri, 02 Mar 2012 00:00:00 +0000</pubDate><guid>https://whileydave.com/2012/03/02/type-aliasing-in-java/</guid><description>A problem I often encounter in Java is that I want to say &amp;ldquo;these two things are the same&amp;rdquo;, but Java won&amp;rsquo;t let me. Suppose I want to maintain an int[] array which is always sorted in my program.</description></item><item><title>A Problem of Decoupling?</title><link>https://whileydave.com/2012/02/29/a-problem-of-decoupling/</link><pubDate>Wed, 29 Feb 2012 00:00:00 +0000</pubDate><guid>https://whileydave.com/2012/02/29/a-problem-of-decoupling/</guid><description>Recently, I&amp;rsquo;ve been working on improving the core framework that underpins the Whiley compiler. This provides a platform for reading/writing files of specified content in a structured fashion. Like Java, Whiley provides a hierarchical namespace in which names live and can be imported by others.</description></item><item><title>Writing a PNG Decoder in Whiley!</title><link>https://whileydave.com/2012/02/18/writing-a-png-decoder-in-whiley/</link><pubDate>Sat, 18 Feb 2012 00:00:00 +0000</pubDate><guid>https://whileydave.com/2012/02/18/writing-a-png-decoder-in-whiley/</guid><description>Over the last few days, I have been writing GIF and PNG decoders in Whiley. These form part of an image manipulation benchmark which I&amp;rsquo;m planning to use for experimenting with the compiler.</description></item><item><title>Three Rules for Programming Language Syntax?</title><link>https://whileydave.com/2012/01/11/three-rules-for-programming-language-syntax/</link><pubDate>Wed, 11 Jan 2012 00:00:00 +0000</pubDate><guid>https://whileydave.com/2012/01/11/three-rules-for-programming-language-syntax/</guid><description>I&amp;rsquo;m always pondering the question: what makes good programming language syntax? One thing occuring to me is that many languages often ignore the HCI aspect. For me, it&amp;rsquo;s a given that the purpose of a programming language is to simplify the programmer&amp;rsquo;s life, not the other way around.</description></item></channel></rss>