<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Blog on Dave's Homepage</title><link>https://whileydave.com/blog/</link><description>Recent content in Blog on Dave's Homepage</description><generator>Hugo -- gohugo.io</generator><language>en-nz</language><lastBuildDate>Fri, 13 Oct 2017 20:31:39 -0500</lastBuildDate><atom:link href="https://whileydave.com/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>Type Checking in Whiley goes Both Ways!</title><link>https://whileydave.com/2022/06/15/type-checking-in-whiley-goes-both-ways/</link><pubDate>Wed, 15 Jun 2022 00:00:00 +0000</pubDate><guid>https://whileydave.com/2022/06/15/type-checking-in-whiley-goes-both-ways/</guid><description>Type checking in Whiley is a curious thing as it goes both forwards and backwards. This is sometimes referred to as bidirectional type checking (see e.g. here and here). This is surprisingly useful in Whiley (perhaps because the language has a reasonably unusual feature set).</description></item><item><title>Whiley gets Rusty!</title><link>https://whileydave.com/2022/05/31/whiley-gets-rusty/</link><pubDate>Tue, 31 May 2022 00:00:00 +0000</pubDate><guid>https://whileydave.com/2022/05/31/whiley-gets-rusty/</guid><description>I&amp;rsquo;ve been learning Rust for a while now but, at the same time, trying to continue developing Whiley. Since Whiley was written entirely in Java, these activities were mutually exclusive and it was frustrating trying to balance things!</description></item><item><title>Verifying an Auction Contract in Whiley</title><link>https://whileydave.com/2022/05/17/verifying-an-auction-contract-in-whiley/</link><pubDate>Tue, 17 May 2022 00:00:00 +0000</pubDate><guid>https://whileydave.com/2022/05/17/verifying-an-auction-contract-in-whiley/</guid><description>Since Whiley is a general purpose verification system, I thought it might be interesting to try and verify a smart contract. Smart contracts are well suited to formal verification tools (like Whiley), as they are small and typically self-contained.</description></item><item><title>Puzzling Strong Updates in Rust</title><link>https://whileydave.com/2022/04/27/puzzling-strong-updates-in-rust/</link><pubDate>Wed, 27 Apr 2022 00:00:00 +0000</pubDate><guid>https://whileydave.com/2022/04/27/puzzling-strong-updates-in-rust/</guid><description>The idea of a strong update comes from earlier work on static analysis and, in particular, pointer analysis. To understand this, let&amp;rsquo;s imagine a hypothetical non-null analysis for C:
int* r = (int*) malloc(sizeof(int)); int** p = &amp;amp;r; At this point, our non-null analysis would conclude that p was nonnull and that r was nullable.</description></item><item><title>Modelling Borrow Checking in Rust</title><link>https://whileydave.com/2021/12/06/modelling-borrow-checking-in-rust/</link><pubDate>Mon, 06 Dec 2021 00:00:00 +0000</pubDate><guid>https://whileydave.com/2021/12/06/modelling-borrow-checking-in-rust/</guid><description>Recently, I&amp;rsquo;ve been working on a formalisation of borrow checking in Rust. The idea is to help people think clearly about how borrow checking works (in someways perhaps similar to the Stacked Borrows work but with a different perspective).</description></item><item><title>Verifying the Whiley Standard Library</title><link>https://whileydave.com/2021/10/27/verifying-the-whiley-standard-library/</link><pubDate>Wed, 27 Oct 2021 00:00:00 +0000</pubDate><guid>https://whileydave.com/2021/10/27/verifying-the-whiley-standard-library/</guid><description>For sometime now, its been possible to use Boogie / Z3 as a backend for verifying Whiley programs. Initially that was pretty sketchy, but it&amp;rsquo;s really starting to ramp up now.</description></item><item><title>Test-Driving the Rust Model Checker (RMC)</title><link>https://whileydave.com/2021/10/26/test-driving-the-rust-model-checker-rmc/</link><pubDate>Tue, 26 Oct 2021 00:00:00 +0000</pubDate><guid>https://whileydave.com/2021/10/26/test-driving-the-rust-model-checker-rmc/</guid><description>The Rust Model Checker (RMC) allows Rust programs to be model checked using the C Bounded Model Checker (CBMC). In essence, RMC is an extension to the Rust compiler which converts Rust&amp;rsquo;s MIR into the input language of CBMC (GOTO).</description></item><item><title>Fooling the Borrow Checker</title><link>https://whileydave.com/2021/09/01/fooling-the-borrow-checker/</link><pubDate>Wed, 01 Sep 2021 00:00:00 +0000</pubDate><guid>https://whileydave.com/2021/09/01/fooling-the-borrow-checker/</guid><description>An interesting question is how the Rust borrow checker decides when a borrow could still be live. This illustrates a simple example:
letmutx=1234;letz=f(&amp;amp;x);...The question here is whether or not the borrow &amp;amp;x is still live after the method call.</description></item><item><title>Sizing Up Types in Rust</title><link>https://whileydave.com/2021/07/15/sizing-up-types-in-rust/</link><pubDate>Thu, 15 Jul 2021 00:00:00 +0000</pubDate><guid>https://whileydave.com/2021/07/15/sizing-up-types-in-rust/</guid><description>When learning Rust, understanding the difference between statically and dynamically sized types seems critical. There are some good discussions out there already (e.g. here and here). Whilst these explain the mechanics, they didn&amp;rsquo;t tell me why its done like this in Rust.</description></item><item><title>Understanding Generic Type Variance (in Whiley)</title><link>https://whileydave.com/2021/03/14/understanding-generic-type-variance-in-whiley/</link><pubDate>Sun, 14 Mar 2021 00:00:00 +0000</pubDate><guid>https://whileydave.com/2021/03/14/understanding-generic-type-variance-in-whiley/</guid><description>For languages which support generic types, an important question is deciding whether or not a type C&amp;lt;T&amp;gt; is a subtype of another related type C&amp;lt;S&amp;gt;. Since Whiley was recently extended to support generic types, its interesting to think about how this was handled.</description></item><item><title>Dynamic Cycle Detection for Lock Ordering</title><link>https://whileydave.com/2020/12/19/dynamic-cycle-detection-for-lock-ordering/</link><pubDate>Sat, 19 Dec 2020 00:00:00 +0000</pubDate><guid>https://whileydave.com/2020/12/19/dynamic-cycle-detection-for-lock-ordering/</guid><description>Recently, I discovered that an algorithm of mine from a few years back is being used in both TensorFlow and the Abseil C++ library (see here and here). That is of course pretty exciting since they are both widely used libraries!</description></item><item><title>Automated Testing for Whiley</title><link>https://whileydave.com/2020/12/02/automated-testing-for-whiley/</link><pubDate>Wed, 02 Dec 2020 00:00:00 +0000</pubDate><guid>https://whileydave.com/2020/12/02/automated-testing-for-whiley/</guid><description>Recently, the online editor for Whiley was updated with some new features. Actually, the update represents a complete rewrite of the front-end in Whiley. Obviously, I am very excited about that!</description></item><item><title>Understanding Partial Moves in Rust</title><link>https://whileydave.com/2020/11/30/understanding-partial-moves-in-rust/</link><pubDate>Mon, 30 Nov 2020 00:00:00 +0000</pubDate><guid>https://whileydave.com/2020/11/30/understanding-partial-moves-in-rust/</guid><description>Recently I&amp;rsquo;ve been digging into Rust and, whilst it&amp;rsquo;s a great language on many fronts, I do find lots of hidden complexity. One example which doesn&amp;rsquo;t get much attention is partial moves.</description></item><item><title>The Semantics of Semantic Versioning?</title><link>https://whileydave.com/2020/09/24/the-semantics-of-semantic-versioning/</link><pubDate>Thu, 24 Sep 2020 00:00:00 +0000</pubDate><guid>https://whileydave.com/2020/09/24/the-semantics-of-semantic-versioning/</guid><description>Semantic versioning is a surprisingly interesting topic when you get into it. Recently, myself and a few colleagues (Patrick &amp;amp; Jens) have been giving it some thought (and we even wrote an essay on it)!</description></item><item><title>Whiley is Ten Years Old!</title><link>https://whileydave.com/2020/09/01/whiley-is-ten-years-old/</link><pubDate>Tue, 01 Sep 2020 00:00:00 +0000</pubDate><guid>https://whileydave.com/2020/09/01/whiley-is-ten-years-old/</guid><description>The first commit recorded in the WhileyCompiler repository on Github is dated June 25th, 2010. That means Whiley has been going for just over ten years already! Wow, time sure does fly.</description></item><item><title>Verifying leftPad() in Whiley</title><link>https://whileydave.com/2018/04/23/verifying-leftpad-in-whiley/</link><pubDate>Mon, 23 Apr 2018 00:00:00 +0000</pubDate><guid>https://whileydave.com/2018/04/23/verifying-leftpad-in-whiley/</guid><description>The leftPad(string,int) function simply pads a string up to a given size by inserted spaces at the beginning. For example, leftPad(&amp;quot;hello&amp;quot;,8) produces &amp;quot; hello&amp;quot;. This little function shot to fame in 2016 when a developer pulled all his modules from NPM, of which one provided the leftPad() functionality.</description></item><item><title>Verifying Bubble Sort in Whiley</title><link>https://whileydave.com/2017/12/19/verifying-bubble-sort-in-whiley/</link><pubDate>Tue, 19 Dec 2017 00:00:00 +0000</pubDate><guid>https://whileydave.com/2017/12/19/verifying-bubble-sort-in-whiley/</guid><description>Bubble sort is a classic sorting algorithm with lots of well-known issues. It&amp;rsquo;s been a long time since I thought much about this algorithm. But, it turns out to be an interesting verification example for Whiley, as it has some interesting loop invariants.</description></item><item><title>On the Internet and Object-Oriented Programming</title><link>https://whileydave.com/2017/06/21/on-the-internet-and-object-oriented-programming/</link><pubDate>Wed, 21 Jun 2017 00:00:00 +0000</pubDate><guid>https://whileydave.com/2017/06/21/on-the-internet-and-object-oriented-programming/</guid><description>The rise of the internet over the last, say, two decades has been pretty unstoppable (we all know that). But, is it now affecting the prominence of object-oriented programming? I&amp;rsquo;m going to try and argue in this post that: yes, it is.</description></item><item><title>Property Syntax in Whiley</title><link>https://whileydave.com/2017/03/28/property-syntax-in-whiley/</link><pubDate>Tue, 28 Mar 2017 00:00:00 +0000</pubDate><guid>https://whileydave.com/2017/03/28/property-syntax-in-whiley/</guid><description>Recently, I gave a demo which showed off thew new &amp;ldquo;Property Syntax&amp;rdquo; in Whiley. Whilst this is still in the devel branch it will make its way, soon enough, into the next release.</description></item><item><title>On Memory Management and Rust</title><link>https://whileydave.com/2017/02/15/on-memory-management-and-rust/</link><pubDate>Wed, 15 Feb 2017 00:00:00 +0000</pubDate><guid>https://whileydave.com/2017/02/15/on-memory-management-and-rust/</guid><description>Rust is definitely one of the more interesting new programming language I&amp;rsquo;ve come across recently. Memory management is definitely Rust&amp;rsquo;s &amp;ldquo;thing&amp;rdquo;, and the language wants to have its cake and eat it (so to speak).</description></item><item><title>Understanding Effective Unions in Whiley</title><link>https://whileydave.com/2016/12/09/understanding-effective-unions-in-whiley/</link><pubDate>Fri, 09 Dec 2016 00:00:00 +0000</pubDate><guid>https://whileydave.com/2016/12/09/understanding-effective-unions-in-whiley/</guid><description>The concept of effective union types in Whiley exposes some interesting features worth considering. In particular, they result in a separation between the readable and writeable view of a type. But, we&amp;rsquo;re getting ahead of ourselves!</description></item><item><title>Mixfix Function Syntax for Whiley</title><link>https://whileydave.com/2016/11/15/mixfix-function-syntax-for-whiley/</link><pubDate>Tue, 15 Nov 2016 00:00:00 +0000</pubDate><guid>https://whileydave.com/2016/11/15/mixfix-function-syntax-for-whiley/</guid><description>Today I saw an interesting talk about mix-fix function syntax. The idea is to allow a more complex syntax for declaring and calling functions, rather than the very common &amp;ldquo;uniform&amp;rdquo; style.</description></item><item><title>Program Specification in Practice?</title><link>https://whileydave.com/2016/09/01/program-specification-in-practice/</link><pubDate>Thu, 01 Sep 2016 00:00:00 +0000</pubDate><guid>https://whileydave.com/2016/09/01/program-specification-in-practice/</guid><description>Recently, as part of our Programming Languages Reading group, we looked at the paper &amp;ldquo;Contracts in Practice&amp;rdquo; by Estler et al., (see here for a copy). This is quite an interesting paper and the authors perform an empirical investigation as to how contracts are used by programmers in practice.</description></item><item><title>Reference Lifetimes in Whiley</title><link>https://whileydave.com/2016/05/28/reference-lifetimes-in-whiley/</link><pubDate>Sat, 28 May 2016 00:00:00 +0000</pubDate><guid>https://whileydave.com/2016/05/28/reference-lifetimes-in-whiley/</guid><description>The concept of lifetimes was pioneered in the Rust programming language, and builds on earlier notions of regions and ownership types. Lifetimes are considered one of Rust&amp;rsquo;s &amp;ldquo;most unique and compelling features&amp;rdquo;.</description></item><item><title>Contractive and Uninhabited Types in Whiley</title><link>https://whileydave.com/2016/04/21/contractive-and-uninhabited-types-in-whiley/</link><pubDate>Thu, 21 Apr 2016 00:00:00 +0000</pubDate><guid>https://whileydave.com/2016/04/21/contractive-and-uninhabited-types-in-whiley/</guid><description>An interesting feature of Whiley is that it supports true recursive types. These are surprisingly tricky to get right, and recently we came across some interesting examples that the Whiley compiler should (but doesn&amp;rsquo;t) check for.</description></item><item><title>Encoding C Strings in Whiley</title><link>https://whileydave.com/2015/11/12/encoding-c-strings-in-whiley/</link><pubDate>Thu, 12 Nov 2015 00:00:00 +0000</pubDate><guid>https://whileydave.com/2015/11/12/encoding-c-strings-in-whiley/</guid><description>In this post, we&amp;rsquo;re going to consider representing the classic C string in Whiley. This turns out to be useful as we can then try to verify properties about functions which operate on C strings (e.</description></item><item><title>Introductory Lecture on Verification in Whiley</title><link>https://whileydave.com/2015/09/22/introductory-lecture-on-verification-in-whiley/</link><pubDate>Tue, 22 Sep 2015 00:00:00 +0000</pubDate><guid>https://whileydave.com/2015/09/22/introductory-lecture-on-verification-in-whiley/</guid><description>We&amp;rsquo;ve started using Whiley again in my second year course Formal Foundations of Programming. The aim of this course is to introduce students into a range of techniques related to software correctness.</description></item><item><title>My ATtiny85 Games Console</title><link>https://whileydave.com/2015/01/27/my-attiny85-games-console/</link><pubDate>Tue, 27 Jan 2015 00:00:00 +0000</pubDate><guid>https://whileydave.com/2015/01/27/my-attiny85-games-console/</guid><description>One my goals for Whiley in 2015 is to focus more on embedded systems (see here for more). A recent project of ours was compiling Whiley code to run on a QuadCopter and this identified several challenges here.</description></item><item><title>Verification with Data from Untrusted Sources</title><link>https://whileydave.com/2014/12/09/verification-with-data-from-untrusted-sources/</link><pubDate>Tue, 09 Dec 2014 00:00:00 +0000</pubDate><guid>https://whileydave.com/2014/12/09/verification-with-data-from-untrusted-sources/</guid><description>Recently, I was listening to the latest edition of the Illegal Argument podcast, and it turns out they were discussing Whiley! (about 103:16 minutes in). The discussion was about how verification interacts with data from an untrusted source (e.</description></item><item><title>Loop Variant Relations</title><link>https://whileydave.com/2014/07/10/loop-variant-relations/</link><pubDate>Thu, 10 Jul 2014 00:00:00 +0000</pubDate><guid>https://whileydave.com/2014/07/10/loop-variant-relations/</guid><description>Proving that a loop always terminates is a common requirement when verifying software. The usual approach to doing this is to provide a loop variant function. This is typically an integer expression which decreases on every iteration of the loop.</description></item><item><title>Understanding Ghost Variables in Software Verification</title><link>https://whileydave.com/2014/06/20/understanding-ghost-variables-in-software-verification/</link><pubDate>Fri, 20 Jun 2014 00:00:00 +0000</pubDate><guid>https://whileydave.com/2014/06/20/understanding-ghost-variables-in-software-verification/</guid><description>Verification tools often support the use of ghost variables to help in the verification process. A ghost variable is not needed for the program to execute, and will not be compiled into object code.</description></item><item><title>Loop Invariants and Do/While Statements</title><link>https://whileydave.com/2014/05/15/loop-invariants-and-do/while-statements/</link><pubDate>Thu, 15 May 2014 00:00:00 +0000</pubDate><guid>https://whileydave.com/2014/05/15/loop-invariants-and-do/while-statements/</guid><description>Recently, I encountered what I thought was a bug in the Whiley Compiler. The issue related to the current treatment of do/while loops and loop invariants. Having now spent a fair bit of time researching the issue, the answer is not so clear.</description></item><item><title>Loop invariants and Break Statements</title><link>https://whileydave.com/2014/05/02/loop-invariants-and-break-statements/</link><pubDate>Fri, 02 May 2014 00:00:00 +0000</pubDate><guid>https://whileydave.com/2014/05/02/loop-invariants-and-break-statements/</guid><description>In this article, I&amp;rsquo;ll look at some interesting issues relating to the use of break statements within loops, and how this affects the idea of a loop invariant. For some general background on writing loop invariants in Whiley, see my previous post.</description></item><item><title>Thoughts on Parsing Whiley (and Indentation Syntax)</title><link>https://whileydave.com/2014/01/23/thoughts-on-parsing-whiley-and-indentation-syntax/</link><pubDate>Thu, 23 Jan 2014 00:00:00 +0000</pubDate><guid>https://whileydave.com/2014/01/23/thoughts-on-parsing-whiley-and-indentation-syntax/</guid><description>Recently, I have been reworking the Whiley compiler&amp;rsquo;s parser to make it more robust. Doing this has opened up some interesting issues, which I thought were worth discussing. Whiley uses indentation syntax without explicit end-of-statement terminators (e.</description></item></channel></rss>